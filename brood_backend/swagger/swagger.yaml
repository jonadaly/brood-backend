openapi: "3.0.0"
info:
  version: 1.0.0
  title: Brood API
  license:
    name: Apache 2.0

paths:
  /v1/peck:
    post:
      summary: Create peck
      operationId: brood_backend.api.create_peck
      requestBody:
        description: Peck to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeckNew'
      responses:
        '200':
          description: Peck response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Peck'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/brood:
    post:
      summary: Create brood
      operationId: brood_backend.api.create_brood
      requestBody:
        description: Brood to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroodNew'
      responses:
        '200':
          description: Brood response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brood'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/brood/{brood_id}:
    get:
      summary: Get brood by ID
      operationId: brood_backend.api.get_brood_by_id
      parameters:
        - name: brood_id
          in: path
          schema:
            type: string
          required: true
          description: 'Brood id'
          x-example: '84a9129c-e215-440b-afc0-0007c032f080'
      responses:
        '200':
          description: Brood response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brood'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/chicken:
    post:
      summary: Create chicken
      operationId: brood_backend.api.create_chicken
      requestBody:
        description: Chicken to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChickenNew'
      responses:
        '200':
          description: Chicken response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chicken'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: "entity not found"

    Peck:
      allOf:
        - $ref: '#/components/schemas/PeckNew'
        - required:
          - uuid
          - created
          properties:
            uuid:
              type: string
              example: "17c443ec-b27a-453d-a1db-f8e98886fa32"
            created:
              type: string
              example: "2018-01-01T00:00:00.000Z"

    PeckNew:
      required:
        - chicken_uuid
        - latitude
        - longitude
        - status
      properties:
        chicken_uuid:
          type: string
          example: "84a9129c-e215-440b-afc0-0007c032f080"
        latitude:
          type: number
          format: double
          example: 51.4769
        longitude:
          type: number
          format: double
          example: 0.0005
        status:
          type: string
          example: "!"

    ChickenNew:
      required:
        - brood_uuid
        - name
      properties:
        brood_uuid:
          type: string
          example: "d3d2b214-191a-46e0-8583-ccc7af40ac41"
        name:
          type: string
          example: "Cluckers"

    Chicken:
      allOf:
        - $ref: '#/components/schemas/ChickenNew'
        - required:
          - uuid
          - created
          - name
          - status
          - temperature
          - openweather_icon_id
          properties:
            uuid:
              type: string
              example: "d3d2b214-191a-46e0-8583-ccc7af40ac41"
            created:
              type: string
              example: "2018-01-01T00:00:00.000Z"
            name:
              type: string
              example: "Cluckers"
            status:
              type: string
              example: "!"
            temperature:
              type: number
              format: int32
              example: 21
            openweather_icon_id:
              type: string
              example: "01d"

    BroodNew:
      required:
        - name
        - pass_code
      properties:
        name:
          type: string
          example: "some brood"
        pass_code:
          type: string
          example: "password123"

    Brood:
      required:
        - uuid
        - created
        - name
        - chickens
      properties:
        uuid:
          type: string
          example: "d3d2b214-191a-46e0-8583-ccc7af40ac41"
        created:
          type: string
          example: "2018-01-01T00:00:00.000Z"
        name:
          type: string
          example: "Cluckers"
        chickens:
          type: array
          items:
            $ref: '#/components/schemas/Chicken'